I'll continue with the remaining code for the complete Bookify system.



```typescript
// Continuing from src/services/payment.service.ts

export const processDepositRefund = async (borrow: IBorrow) => {
  const originalOrder = await OrderModel.findById(borrow.orderId);
  if (!originalOrder?.razorpayPaymentId) {
    throw new Error('Original payment not found');
  }

  try {
    // Initiate refund through Razorpay
    await razorpay.payments.refund(originalOrder.razorpayPaymentId, {
      amount: borrow.depositAmount * 100 // Convert to paise
    });

    // Update borrow record
    borrow.depositRefunded = true;
    await borrow.save();

    // Create refund order record
    const refundOrder = await OrderModel.create({
      userId: borrow.userId,
      borrowId: borrow._id,
      amount: borrow.depositAmount,
      paymentType: 'deposit',
      razorpayOrderId: `refund_${Date.now()}`,
      status: 'refunded'
    });

    return refundOrder;
  } catch (error) {
    throw new Error('Refund processing failed');
  }
};

// src/controllers/book.controller.ts
import { Request, Response } from 'express';
import { Types } from 'mongoose';
import { BookModel } from '../models/book.model';

export const getAvailableBooks = async (req: Request, res: Response) => {
  try {
    const books = await BookModel.find({ copiesAvailable: { $gt: 0 } })
      .populate('author')
      .populate('category');
    res.json(books);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch books' });
  }
};

export const getBookDetails = async (req: Request, res: Response) => {
  try {
    const book = await BookModel.findById(req.params.id)
      .populate('author')
      .populate('category')
      .populate('reviews');
    if (!book) {
      return res.status(404).json({ error: 'Book not found' });
    }
    res.json(book);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch book details' });
  }
};

// src/controllers/purchase.controller.ts
import { Request, Response } from 'express';
import * as PurchaseService from '../services/purchase.service';

export const initiatePurchase = async (req: Request, res: Response) => {
  try {
    const { userId, bookId, quantity } = req.body;
    const result = await PurchaseService.initiatePurchase(
      new Types.ObjectId(userId),
      new Types.ObjectId(bookId),
      quantity
    );
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: (error as Error).message });
  }
};

export const getPurchaseHistory = async (req: Request, res: Response) => {
  try {
    const { userId } = req.params;
    const purchases = await PurchaseModel.find({ userId })
      .populate('bookId')
      .sort({ purchaseDate: -1 });
    res.json(purchases);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch purchase history' });
  }
};

// src/controllers/borrow.controller.ts
import { Request, Response } from 'express';
import * as BorrowService from '../services/borrow.service';

export const initiateBorrow = async (req: Request, res: Response) => {
  try {
    const { userId, bookId, depositAmount } = req.body;
    const result = await BorrowService.initiateBorrow(
      new Types.ObjectId(userId),
      new Types.ObjectId(bookId),
      depositAmount
    );
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: (error as Error).message });
  }
};

export const returnBook = async (req: Request, res: Response) => {
  try {
    const { borrowId } = req.params;
    const result = await BorrowService.returnBook(
      new Types.ObjectId(borrowId)
    );
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: (error as Error).message });
  }
};

export const getBorrowHistory = async (req: Request, res: Response) => {
  try {
    const { userId } = req.params;
    const borrows = await BorrowModel.find({ userId })
      .populate('bookId')
      .sort({ borrowDate: -1 });
    res.json(borrows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch borrow history' });
  }
};

// src/controllers/payment.controller.ts
import { Request, Response } from 'express';
import * as PaymentService from '../services/payment.service';

export const verifyPayment = async (req: Request, res: Response) => {
  try {
    const { orderId, razorpayPaymentId } = req.body;
    const result = await PaymentService.processPayment(
      new Types.ObjectId(orderId),
      razorpayPaymentId
    );
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: (error as Error).message });
  }
};

// src/routes/book.routes.ts
import express from 'express';
import * as BookController from '../controllers/book.controller';

const router = express.Router();

router.get('/', BookController.getAvailableBooks);
router.get('/:id', BookController.getBookDetails);

export default router;

// src/routes/purchase.routes.ts
import express from 'express';
import * as PurchaseController from '../controllers/purchase.controller';

const router = express.Router();

router.post('/initiate', PurchaseController.initiatePurchase);
router.get('/history/:userId', PurchaseController.getPurchaseHistory);

export default router;

// src/routes/borrow.routes.ts
import express from 'express';
import * as BorrowController from '../controllers/borrow.controller';

const router = express.Router();

router.post('/initiate', BorrowController.initiateBorrow);
router.post('/return/:borrowId', BorrowController.returnBook);
router.get('/history/:userId', BorrowController.getBorrowHistory);

export default router;

// src/routes/payment.routes.ts
import express from 'express';
import * as PaymentController from '../controllers/payment.controller';

const router = express.Router();

router.post('/verify', PaymentController.verifyPayment);

export default router;

// src/app.ts
import express from 'express';
import mongoose from 'mongoose';
import bookRoutes from './routes/book.routes';
import purchaseRoutes from './routes/purchase.routes';
import borrowRoutes from './routes/borrow.routes';
import paymentRoutes from './routes/payment.routes';

const app = express();

app.use(express.json());

// Routes
app.use('/api/books', bookRoutes);
app.use('/api/purchases', purchaseRoutes);
app.use('/api/borrows', borrowRoutes);
app.use('/api/payments', paymentRoutes);

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI!)
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('MongoDB connection error:', err));

export default app;

```

Here's the complete flow of how the system works:

1. Book Purchase Flow:
```
User selects book → Initiate purchase → Create Razorpay order → User pays → Verify payment → Update inventory
POST /api/purchases/initiate → POST /api/payments/verify
```

2. Book Borrow Flow:
```
User selects book → Initiate borrow → Create deposit order → User pays deposit → Verify payment → Book borrowed
POST /api/borrows/initiate → POST /api/payments/verify
```

3. Book Return Flow:
```
User returns book → Check return date → Calculate fine (if late) → Process deposit refund (if no fine)
POST /api/borrows/return/:borrowId
```

4. Fine Payment Flow:
```
Fine calculated → Create fine order → User pays fine → Verify payment → Process deposit refund
Automatic during return → POST /api/payments/verify
```

To set up and use the system:

1. Install dependencies:
```bash
npm install express mongoose razorpay @types/express @types/mongoose @types/razorpay
```

2. Set up environment variables in `.env`:
```
MONGODB_URI=your_mongodb_uri
RAZORPAY_KEY_ID=your_razorpay_key_id
RAZORPAY_KEY_SECRET=your_razorpay_key_secret
```

3. Start the server:
```bash
npm start
```

Key Features:
1. Complete book management
2. Purchase and borrow functionality
3. Automatic fine calculation
4. Deposit handling
5. Payment processing with Razorpay
6. History tracking for purchases and borrows

Would you like me to explain any specific part of the system in more detail?




____________________________________________________________________________________________________________












I'll help you create a complete payment and borrowing system for your Bookify website based on your project structure and requirements.



```typescript
// src/types/model.types.ts
import { Types } from 'mongoose';

export interface IBook {
  _id: Types.ObjectId;
  title: string;
  image: Types.ObjectId;
  author: Types.ObjectId;
  isbn: number;
  category: Types.ObjectId;
  price: number;
  publishedYear: number;
  publisher: string;
  description: string;
  totalCopies: number;
  copiesAvailable: number;
  reviews: Types.ObjectId;
}

export interface IUser {
  _id: Types.ObjectId;
  name: string;
  email: string;
  borrowedBooks: Types.ObjectId[];
}

export interface IBorrow {
  _id: Types.ObjectId;
  userId: Types.ObjectId;
  bookId: Types.ObjectId;
  orderId: Types.ObjectId;
  borrowDate: Date;
  dueDate: Date;
  returnDate?: Date;
  depositAmount: number;
  status: 'pending' | 'active' | 'returned' | 'overdue';
  depositRefunded: boolean;
}

export interface IOrder {
  _id: Types.ObjectId;
  userId: Types.ObjectId;
  bookId?: Types.ObjectId;
  borrowId?: Types.ObjectId;
  fineId?: Types.ObjectId;
  amount: number;
  paymentType: 'purchase' | 'deposit' | 'fine';
  razorpayOrderId: string;
  razorpayPaymentId?: string;
  status: 'pending' | 'completed' | 'failed' | 'refunded';
}

export interface IFine {
  _id: Types.ObjectId;
  borrowId: Types.ObjectId;
  userId: Types.ObjectId;
  amount: number;
  daysLate: number;
  orderId?: Types.ObjectId;
  status: 'pending' | 'paid';
}

// src/models/order.model.ts
import { model, Schema, Types } from 'mongoose';
import { IOrder } from '../types/model.types';

const orderSchema = new Schema({
  userId: { type: Types.ObjectId, ref: 'User', required: true },
  bookId: { type: Types.ObjectId, ref: 'Book' },
  borrowId: { type: Types.ObjectId, ref: 'Borrow' },
  fineId: { type: Types.ObjectId, ref: 'Fine' },
  amount: { type: Number, required: true },
  paymentType: {
    type: String,
    enum: ['purchase', 'deposit', 'fine'],
    required: true
  },
  razorpayOrderId: { type: String, required: true },
  razorpayPaymentId: { type: String },
  status: {
    type: String,
    enum: ['pending', 'completed', 'failed', 'refunded'],
    default: 'pending'
  }
}, { timestamps: true });

export const OrderModel = model<IOrder>('Order', orderSchema);

// src/models/borrow.model.ts
import { model, Schema, Types } from 'mongoose';
import { IBorrow } from '../types/model.types';

const borrowSchema = new Schema({
  userId: { type: Types.ObjectId, ref: 'User', required: true },
  bookId: { type: Types.ObjectId, ref: 'Book', required: true },
  orderId: { type: Types.ObjectId, ref: 'Order', required: true },
  borrowDate: { type: Date, required: true },
  dueDate: { type: Date, required: true },
  returnDate: { type: Date },
  depositAmount: { type: Number, required: true },
  status: {
    type: String,
    enum: ['pending', 'active', 'returned', 'overdue'],
    default: 'pending'
  },
  depositRefunded: { type: Boolean, default: false }
}, { timestamps: true });

export const BorrowModel = model<IBorrow>('Borrow', borrowSchema);

// src/models/fine.model.ts
import { model, Schema, Types } from 'mongoose';
import { IFine } from '../types/model.types';

const fineSchema = new Schema({
  borrowId: { type: Types.ObjectId, ref: 'Borrow', required: true },
  userId: { type: Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  daysLate: { type: Number, required: true },
  orderId: { type: Types.ObjectId, ref: 'Order' },
  status: {
    type: String,
    enum: ['pending', 'paid'],
    default: 'pending'
  }
}, { timestamps: true });

export const FineModel = model<IFine>('Fine', fineSchema);

// src/services/razorpay.service.ts
import Razorpay from 'razorpay';

const razorpay = new Razorpay({
  key_id: process.env.RAZORPAY_KEY_ID!,
  key_secret: process.env.RAZORPAY_KEY_SECRET!
});

export const createRazorpayOrder = async (amount: number): Promise<string> => {
  const order = await razorpay.orders.create({
    amount: amount * 100, // Convert to paise
    currency: 'INR',
    receipt: `receipt_${Date.now()}`
  });
  return order.id;
};

export const verifyPayment = async (razorpayOrderId: string, razorpayPaymentId: string): Promise<boolean> => {
  const payment = await razorpay.payments.fetch(razorpayPaymentId);
  return payment.order_id === razorpayOrderId && payment.status === 'captured';
};

// src/services/borrow.service.ts
import { Types } from 'mongoose';
import { BorrowModel } from '../models/borrow.model';
import { OrderModel } from '../models/order.model';
import { BookModel } from '../models/book.model';
import { createRazorpayOrder } from './razorpay.service';

export const initiateBorrow = async (
  userId: Types.ObjectId,
  bookId: Types.ObjectId,
  depositAmount: number
) => {
  // Check book availability
  const book = await BookModel.findById(bookId);
  if (!book || book.copiesAvailable <= 0) {
    throw new Error('Book not available');
  }

  // Create Razorpay order
  const razorpayOrderId = await createRazorpayOrder(depositAmount);

  // Create order record
  const order = await OrderModel.create({
    userId,
    bookId,
    amount: depositAmount,
    paymentType: 'deposit',
    razorpayOrderId
  });

  // Create borrow record
  const borrow = await BorrowModel.create({
    userId,
    bookId,
    orderId: order._id,
    borrowDate: new Date(),
    dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days
    depositAmount
  });

  return { order, borrow };
};

// src/services/fine.service.ts
import { FineModel } from '../models/fine.model';
import { createRazorpayOrder } from './razorpay.service';

export const calculateAndCreateFine = async (borrowId: Types.ObjectId) => {
  const borrow = await BorrowModel.findById(borrowId);
  if (!borrow) throw new Error('Borrow record not found');

  const daysLate = Math.ceil(
    (Date.now() - borrow.dueDate.getTime()) / (1000 * 60 * 60 * 24)
  );

  if (daysLate <= 0) return null;

  const fineAmount = daysLate * 10; // ₹10 per day
  const razorpayOrderId = await createRazorpayOrder(fineAmount);

  const order = await OrderModel.create({
    userId: borrow.userId,
    borrowId: borrow._id,
    amount: fineAmount,
    paymentType: 'fine',
    razorpayOrderId
  });

  const fine = await FineModel.create({
    borrowId: borrow._id,
    userId: borrow.userId,
    amount: fineAmount,
    daysLate,
    orderId: order._id
  });

  return { fine, order };
};

// src/services/payment.service.ts
import { verifyPayment } from './razorpay.service';

export const processPayment = async (
  orderId: Types.ObjectId,
  razorpayPaymentId: string
) => {
  const order = await OrderModel.findById(orderId);
  if (!order) throw new Error('Order not found');

  const isValid = await verifyPayment(order.razorpayOrderId, razorpayPaymentId);
  if (!isValid) throw new Error('Payment verification failed');

  order.razorpayPaymentId = razorpayPaymentId;
  order.status = 'completed';
  await order.save();

  if (order.paymentType === 'deposit') {
    await BorrowModel.findOneAndUpdate(
      { orderId: order._id },
      { status: 'active' }
    );
    await BookModel.findByIdAndUpdate(
      order.bookId,
      { $inc: { copiesAvailable: -1 } }
    );
  } else if (order.paymentType === 'fine') {
    await FineModel.findOneAndUpdate(
      { orderId: order._id },
      { status: 'paid' }
    );
  }

  return order;
};

// src/controllers/payment.controller.ts
import { Request, Response } from 'express';
import { Types } from 'mongoose';
import * as BorrowService from '../services/borrow.service';
import * as PaymentService from '../services/payment.service';
import * as FineService from '../services/fine.service';

export const initiateBorrow = async (req: Request, res: Response) => {
  try {
    const { userId, bookId, depositAmount } = req.body;
    const result = await BorrowService.initiateBorrow(
      new Types.ObjectId(userId),
      new Types.ObjectId(bookId),
      depositAmount
    );
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: (error as Error).message });
  }
};

export const verifyPayment = async (req: Request, res: Response) => {
  try {
    const { orderId, razorpayPaymentId } = req.body;
    const result = await PaymentService.processPayment(
      new Types.ObjectId(orderId),
      razorpayPaymentId
    );
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: (error as Error).message });
  }
};

export const calculateFine = async (req: Request, res: Response) => {
  try {
    const { borrowId } = req.params;
    const result = await FineService.calculateAndCreateFine(
      new Types.ObjectId(borrowId)
    );
    res.json(result);
  } catch (error) {
    res.status(400).json({ error: (error as Error).message });
  }
};

// src/routes/payment.routes.ts
import express from 'express';
import * as PaymentController from '../controllers/payment.controller';

const router = express.Router();

router.post('/borrow/initiate', PaymentController.initiateBorrow);
router.post('/verify', PaymentController.verifyPayment);
router.get('/fine/calculate/:borrowId', PaymentController.calculateFine);

export default router;

```

This implementation provides a complete payment and borrowing system for your Bookify website. Here's how to use it:

1. Install required dependencies:
```bash
npm install razorpay express mongoose @types/razorpay
```

2. Set up environment variables in `.env`:
```
RAZORPAY_KEY_ID=your_key_id
RAZORPAY_KEY_SECRET=your_key_secret
```

3. Add routes to your `app.ts`:
```typescript
import paymentRoutes from './routes/payment.routes';
app.use('/api/payments', paymentRoutes);
```

Key features:
1. Book borrowing with deposit
2. Automatic fine calculation for late returns
3. Payment processing with Razorpay
4. Status tracking for all transactions
5. Automatic book availability management

The flow works like this:
1. User initiates borrow -> Payment for deposit
2. Book is marked as borrowed after payment
3. On return:
   - If on time -> Deposit refund process
   - If late -> Fine calculation and payment required

Would you like me to explain any specific part in more detail or add additional features?


___________________________________________________________________






















I'll help you create the necessary models for your Bookify website. Since you're using TypeScript, I'll create interfaces and schemas for each model.



```typescript
// src/models/user.model.ts
import mongoose from 'mongoose';

export interface IUser {
  _id: mongoose.Types.ObjectId;
  name: string;
  email: string;
  password: string;
  phoneNumber: string;
  address: string;
  createdAt: Date;
  updatedAt: Date;
}

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  phoneNumber: { type: String, required: true },
  address: { type: String, required: true },
}, { timestamps: true });

export const User = mongoose.model<IUser>('User', userSchema);

// src/models/book.model.ts
export interface IBook {
  _id: mongoose.Types.ObjectId;
  title: string;
  author: string;
  ISBN: string;
  category: string;
  description: string;
  price: number;
  depositAmount: number; // Amount for borrowing
  quantity: number; // Available quantity
  coverImage: string;
  createdAt: Date;
  updatedAt: Date;
}

const bookSchema = new mongoose.Schema({
  title: { type: String, required: true },
  author: { type: String, required: true },
  ISBN: { type: String, required: true, unique: true },
  category: { type: String, required: true },
  description: { type: String, required: true },
  price: { type: Number, required: true },
  depositAmount: { type: Number, required: true },
  quantity: { type: Number, required: true },
  coverImage: { type: String },
}, { timestamps: true });

export const Book = mongoose.model<IBook>('Book', bookSchema);

// src/models/purchase.model.ts
export interface IPurchase {
  _id: mongoose.Types.ObjectId;
  userId: mongoose.Types.ObjectId;
  bookId: mongoose.Types.ObjectId;
  quantity: number;
  totalAmount: number;
  paymentId: string;
  orderId: string;
  status: 'pending' | 'completed' | 'failed';
  createdAt: Date;
  updatedAt: Date;
}

const purchaseSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  bookId: { type: mongoose.Schema.Types.ObjectId, ref: 'Book', required: true },
  quantity: { type: Number, required: true },
  totalAmount: { type: Number, required: true },
  paymentId: { type: String },
  orderId: { type: String, required: true },
  status: { type: String, enum: ['pending', 'completed', 'failed'], default: 'pending' },
}, { timestamps: true });

export const Purchase = mongoose.model<IPurchase>('Purchase', purchaseSchema);

// src/models/borrow.model.ts
export interface IBorrow {
  _id: mongoose.Types.ObjectId;
  userId: mongoose.Types.ObjectId;
  bookId: mongoose.Types.ObjectId;
  borrowDate: Date;
  dueDate: Date;
  returnDate?: Date;
  depositAmount: number;
  paymentId: string;
  orderId: string;
  refundId?: string;
  status: 'pending' | 'active' | 'returned' | 'overdue';
  createdAt: Date;
  updatedAt: Date;
}

const borrowSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  bookId: { type: mongoose.Schema.Types.ObjectId, ref: 'Book', required: true },
  borrowDate: { type: Date, required: true },
  dueDate: { type: Date, required: true },
  returnDate: { type: Date },
  depositAmount: { type: Number, required: true },
  paymentId: { type: String },
  orderId: { type: String, required: true },
  refundId: { type: String },
  status: { 
    type: String, 
    enum: ['pending', 'active', 'returned', 'overdue'], 
    default: 'pending' 
  },
}, { timestamps: true });

export const Borrow = mongoose.model<IBorrow>('Borrow', borrowSchema);

// src/models/fine.model.ts
export interface IFine {
  _id: mongoose.Types.ObjectId;
  borrowId: mongoose.Types.ObjectId;
  userId: mongoose.Types.ObjectId;
  amount: number;
  daysLate: number;
  paymentId?: string;
  orderId?: string;
  status: 'pending' | 'paid';
  createdAt: Date;
  updatedAt: Date;
}

const fineSchema = new mongoose.Schema({
  borrowId: { type: mongoose.Schema.Types.ObjectId, ref: 'Borrow', required: true },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  daysLate: { type: Number, required: true },
  paymentId: { type: String },
  orderId: { type: String },
  status: { type: String, enum: ['pending', 'paid'], default: 'pending' },
}, { timestamps: true });

export const Fine = mongoose.model<IFine>('Fine', fineSchema);

```

These models cover all the necessary functionality for your Bookify website. Here's what each model handles:

1. User Model:
   - Stores user information
   - Contact details
   - Authentication data

2. Book Model:
   - Book details
   - Pricing information
   - Deposit amount for borrowing
   - Inventory tracking

3. Purchase Model:
   - Book purchase records
   - Payment tracking
   - Order status

4. Borrow Model:
   - Book borrowing records
   - Deposit payment tracking
   - Due dates and return status
   - Refund tracking

5. Fine Model:
   - Late return fines
   - Days overdue calculation
   - Fine payment tracking

Important relationships:
- Purchase and Borrow models reference both User and Book
- Fine model references Borrow and User
- All models include timestamps
- All payment-related models include fields for Razorpay integration

To use these models:

1. Install required dependencies:
```bash
npm install mongoose @types/mongoose
```

2. Import and use in your services:
```typescript
import { Book, IBook } from '../models/book.model';
import { Purchase, IPurchase } from '../models/purchase.model';
// ... etc
```

Would you like me to:
1. Add any additional fields to these models?
2. Create indexes for better query performance?
3. Add validation methods to the schemas?
4. Create types for model operations?


-----------------------------------------------------------------------------------------------------------------------------------------------------------




I'll help you create a functional approach to handle payments using Razorpay for your Bookify website.



```typescript
// src/services/payment.service.ts
import Razorpay from 'razorpay';
import { Order } from '../models/order.model';
import { Borrow } from '../models/borrow.model';
import { Fine } from '../models/fine.model';

const razorpay = new Razorpay({
  key_id: process.env.RAZORPAY_KEY_ID!,
  key_secret: process.env.RAZORPAY_KEY_SECRET!
});

// Create order for book purchase
export const createPurchaseOrder = async (order: Order) => {
  try {
    const razorpayOrder = await razorpay.orders.create({
      amount: order.amount * 100, // Convert to paise
      currency: 'INR',
      receipt: `purchase_${order.id}`,
      notes: {
        orderId: order.id,
        type: 'purchase',
        bookId: order.bookId
      }
    });

    return razorpayOrder;
  } catch (error) {
    throw new Error(`Failed to create purchase order: ${error.message}`);
  }
};

// Create order for book deposit
export const createDepositOrder = async (borrow: Borrow) => {
  try {
    const razorpayOrder = await razorpay.orders.create({
      amount: borrow.depositAmount * 100,
      currency: 'INR',
      receipt: `deposit_${borrow.id}`,
      notes: {
        borrowId: borrow.id,
        type: 'deposit',
        bookId: borrow.bookId
      }
    });

    return razorpayOrder;
  } catch (error) {
    throw new Error(`Failed to create deposit order: ${error.message}`);
  }
};

// Create order for late return fine
export const createFineOrder = async (fine: Fine) => {
  try {
    const razorpayOrder = await razorpay.orders.create({
      amount: fine.amount * 100,
      currency: 'INR',
      receipt: `fine_${fine.id}`,
      notes: {
        fineId: fine.id,
        type: 'fine',
        borrowId: fine.borrowId
      }
    });

    return razorpayOrder;
  } catch (error) {
    throw new Error(`Failed to create fine order: ${error.message}`);
  }
};

// Process deposit refund
export const processDepositRefund = async (borrow: Borrow) => {
  try {
    const refund = await razorpay.payments.refund(borrow.paymentId, {
      amount: borrow.depositAmount * 100,
      notes: {
        borrowId: borrow.id,
        type: 'deposit_refund'
      }
    });

    return refund;
  } catch (error) {
    throw new Error(`Failed to process deposit refund: ${error.message}`);
  }
};

// Verify payment signature
export const verifyPaymentSignature = (paymentData: {
  razorpay_order_id: string;
  razorpay_payment_id: string;
  razorpay_signature: string;
}) => {
  const hmac = require('crypto').createHmac('sha256', process.env.RAZORPAY_KEY_SECRET);
  hmac.update(`${paymentData.razorpay_order_id}|${paymentData.razorpay_payment_id}`);
  const generatedSignature = hmac.digest('hex');
  
  return generatedSignature === paymentData.razorpay_signature;
};

```

Now let's create the controller functions:

```typescript
// src/controllers/payment.controller.ts
import { Request, Response } from 'express';
import * as paymentService from '../services/payment.service';
import * as orderService from '../services/order.service';
import * as borrowService from '../services/borrow.service';
import * as fineService from '../services/fine.service';

// Initialize book purchase
export const initiatePurchase = async (req: Request, res: Response) => {
  try {
    const order = await orderService.createOrder(req.body);
    const razorpayOrder = await paymentService.createPurchaseOrder(order);
    
    res.json({
      orderId: razorpayOrder.id,
      amount: razorpayOrder.amount,
      currency: razorpayOrder.currency
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Initialize book borrow with deposit
export const initiateBorrow = async (req: Request, res: Response) => {
  try {
    const borrow = await borrowService.createBorrow(req.body);
    const razorpayOrder = await paymentService.createDepositOrder(borrow);
    
    res.json({
      orderId: razorpayOrder.id,
      amount: razorpayOrder.amount,
      currency: razorpayOrder.currency
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Handle payment verification webhook
export const verifyPayment = async (req: Request, res: Response) => {
  try {
    const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;
    
    const isValid = paymentService.verifyPaymentSignature({
      razorpay_order_id,
      razorpay_payment_id,
      razorpay_signature
    });

    if (!isValid) {
      return res.status(400).json({ error: 'Invalid payment signature' });
    }

    // Get order details from Razorpay
    const order = await razorpay.orders.fetch(razorpay_order_id);
    
    // Update relevant records based on payment type
    switch (order.notes.type) {
      case 'purchase':
        await orderService.confirmPayment(order.notes.orderId, razorpay_payment_id);
        break;
      case 'deposit':
        await borrowService.confirmDeposit(order.notes.borrowId, razorpay_payment_id);
        break;
      case 'fine':
        await fineService.confirmPayment(order.notes.fineId, razorpay_payment_id);
        break;
    }

    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Process deposit refund
export const processRefund = async (req: Request, res: Response) => {
  try {
    const { borrowId } = req.params;
    const borrow = await borrowService.getBorrow(borrowId);
    
    // Check if book is returned and no fines are pending
    if (!borrow.returnDate) {
      return res.status(400).json({ error: 'Book not yet returned' });
    }
    
    const pendingFine = await fineService.getPendingFine(borrowId);
    if (pendingFine) {
      return res.status(400).json({ error: 'Pending fine must be cleared before refund' });
    }

    const refund = await paymentService.processDepositRefund(borrow);
    await borrowService.confirmRefund(borrowId, refund.id);

    res.json({ success: true, refundId: refund.id });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

```

Set up your routes:

```typescript
// src/routes/payment.routes.ts
import { Router } from 'express';
import {
  initiatePurchase,
  initiateBorrow,
  verifyPayment,
  processRefund
} from '../controllers/payment.controller';

const router = Router();

router.post('/purchase', initiatePurchase);
router.post('/borrow', initiateBorrow);
router.post('/verify', verifyPayment);
router.post('/refund/:borrowId', processRefund);

export default router;
```

Frontend integration:

```typescript
const initializePayment = async (orderId: string, amount: number) => {
  const options = {
    key: process.env.RAZORPAY_KEY_ID,
    amount: amount,
    currency: "INR",
    name: "Bookify",
    description: "Book Purchase/Deposit",
    order_id: orderId,
    handler: async (response: any) => {
      try {
        // Send verification request to your backend
        const result = await fetch('/api/payment/verify', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(response),
        });
        const data = await result.json();
        if (data.success) {
          // Handle successful payment
          console.log('Payment successful');
        }
      } catch (error) {
        console.error('Payment verification failed:', error);
      }
    },
  };

  const rzp = new (window as any).Razorpay(options);
  rzp.open();
};
```

This functional approach:
1. Separates concerns into different functions
2. Makes the code more modular and easier to test
3. Maintains all the functionality of the class-based approach
4. Handles all payment scenarios (purchase, deposit, fine, refund)

To use this system:

1. Install dependencies:
```bash
npm install razorpay @types/razorpay
```

2. Set up environment variables:
```env
RAZORPAY_KEY_ID=your_key_id
RAZORPAY_KEY_SECRET=your_key_secret
```

Would you like me to explain any specific part in more detail or help you implement additional features?