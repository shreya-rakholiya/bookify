<!DOCTYPE html>
<html>
<head>
  <title>Razorpay Payment Test</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .payment-card {
      max-width: 600px;
      margin: 50px auto;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .card-header {
      background-color: #f8f9fa;
      padding: 15px;
    }
    .form-group {
      margin-bottom: 15px;
    }
    .payment-button {
      width: 100%;
    }
    .result-section {
      margin-top: 30px;
      display: none;
    }
    .result-card {
      background-color: #f8f9fa;
      border-radius: 5px;
      padding: 15px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="card payment-card">
      <div class="card-header">
        <h3>Razorpay Payment Test</h3>
      </div>
      <div class="card-body">
        <form id="payment-form">
          <div class="form-group">
            <label for="paymentType">Payment Type</label>
            <select class="form-control" id="paymentType">
              <option value="purchase">Book Purchase</option>
              <option value="borrow">Book Borrow (Deposit)</option>
              <option value="fine">Late Return Fine</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="userId">User ID</label>
            <input type="text" class="form-control" id="userId" required placeholder="User ID from MongoDB">
          </div>
          
          <div class="form-group">
            <label for="bookId">Book ID</label>
            <input type="text" class="form-control" id="bookId" required placeholder="Book ID from MongoDB">
          </div>
          
          <div class="form-group" id="quantityGroup">
            <label for="quantity">Quantity</label>
            <input type="number" class="form-control" id="quantity" value="1" min="1">
          </div>
          
          <div class="form-group" id="depositGroup" style="display:none;">
            <label for="depositAmount">Deposit Amount (â‚¹)</label>
            <input type="number" class="form-control" id="depositAmount" value="500">
          </div>
          
          <div class="form-group" id="borrowIdGroup" style="display:none;">
            <label for="borrowId">Borrow ID (for fine payment)</label>
            <input type="text" class="form-control" id="borrowId" placeholder="Borrow ID from MongoDB">
          </div>
          
          <button type="submit" class="btn btn-primary payment-button">Initialize Payment</button>
        </form>
        
        <div class="result-section" id="result-section">
          <h4>Order Created</h4>
          <div class="result-card">
            <pre id="order-details"></pre>
          </div>
          <button class="btn btn-success mt-3" id="pay-button">Proceed to Pay</button>
          
          <div class="mt-4">
            <h4>Payment Verification</h4>
            <div class="result-card">
              <pre id="payment-details"></pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    const BASE_URL = 'http://localhost:8080/user'; // Base API URL

// Show/hide form fields based on payment type
document.getElementById('paymentType').addEventListener('change', function() {
  const paymentType = this.value;
  
  document.getElementById('quantityGroup').style.display = 'none';
  document.getElementById('depositGroup').style.display = 'none';
  document.getElementById('borrowIdGroup').style.display = 'none';
  
  if (paymentType === 'purchase') {
    document.getElementById('quantityGroup').style.display = 'block';
  } else if (paymentType === 'borrow') {
    document.getElementById('depositGroup').style.display = 'block';
  } else if (paymentType === 'fine') {
    document.getElementById('borrowIdGroup').style.display = 'block';
  }
});

// Handle form submission
document.getElementById('payment-form').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const paymentType = document.getElementById('paymentType').value;
  const userId = document.getElementById('userId').value;
  const bookId = document.getElementById('bookId').value;
  
  let endpoint, payload;

  if (paymentType === 'purchase') {
    endpoint = `${BASE_URL}/book/purchase`;
    payload = {
      userId,
      bookId,
      quantity: parseInt(document.getElementById('quantity').value)
    };
  } else if (paymentType === 'borrow') {
    endpoint = `${BASE_URL}/book/borrow`;
    payload = {
      userId,
      bookId,
      depositAmount: parseInt(document.getElementById('depositAmount').value)
    };
  } else if (paymentType === 'fine') {
    const borrowId = document.getElementById('borrowId').value;
    endpoint = `${BASE_URL}/book/return/${borrowId}`;
    payload = {}; // No request body needed
  }

  try {
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });
    
    const result = await response.json();
    
    if (response.ok) {
      document.getElementById('result-section').style.display = 'block';
      document.getElementById('order-details').textContent = JSON.stringify(result, null, 2);
      
      window.orderInfo = {
        id: result.order._id,
        amount: result.order.amount,
        currency: 'INR',
        razorpayOrderId: result.order.razorpayOrderId
      };
    } else {
      alert('Error: ' + result.error);
    }
  } catch (error) {
    alert('Network error: ' + error.message);
  }
});

// Handle payment button click
document.getElementById('pay-button').addEventListener('click', function() {
  if (!window.orderInfo) {
    alert('Please initialize a payment first');
    return;
  }
  
  const options = {
    key: '<%= razorpayKeyId %>', // Replace with your actual Razorpay key
    amount: window.orderInfo.amount,
    currency: window.orderInfo.currency,
    name: 'Library System',
    description: 'Payment for ' + document.getElementById('paymentType').value,
    order_id: window.orderInfo.razorpayOrderId,
    handler: async function(response) {
      try {
        const verifyResponse = await fetch(`${BASE_URL}/payment/verify`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            orderId: window.orderInfo.id,
            razorpayPaymentId: response.razorpay_payment_id
          })
        });
        
        const verifyResult = await verifyResponse.json();
        
        if (verifyResponse.ok) {
          document.getElementById('payment-details').textContent = JSON.stringify(verifyResult, null, 2);
        } else {
          alert('Verification failed: ' + verifyResult.error);
        }
      } catch (error) {
        alert('Verification error: ' + error.message);
      }
    },
    prefill: {
      name: 'Test User',
      email: 'test@example.com',
      contact: '9999999999'
    },
    theme: {
      color: '#3399cc'
    }
  };
  
  const rzp = new Razorpay(options);
  rzp.open();
});

  </script>
</body>
</html>